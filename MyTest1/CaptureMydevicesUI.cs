///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CaptureMydevicesUI recording.
    /// </summary>
    [TestModule("a40a48b3-945c-4461-94e4-4a409dcc0323", ModuleType.Recording, 1)]
    public partial class CaptureMydevicesUI : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static CaptureMydevicesUI instance = new CaptureMydevicesUI();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CaptureMydevicesUI()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CaptureMydevicesUI Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.MyDevicesBtn' at Center", repo.ComPentairPentairhome.MyDevicesBtnInfo, new RecordItemIndex(0));
                repo.ComPentairPentairhome.MyDevicesBtn.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(1));
            Delay.Duration(300, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "MyDevicesUI", repo.ComPentairPentairhome.MyDevicesPoolSpaIntellisync1234, false, new RecordItemIndex(2));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='My Devices') on item 'ComPentairPentairhome.MyDevices'.", repo.ComPentairPentairhome.MyDevicesInfo, new RecordItemIndex(3));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.MyDevicesInfo, "AccessibilityLabel", "My Devices", null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Pool & Spa') on item 'ComPentairPentairhome.PoolSpa'.", repo.ComPentairPentairhome.PoolSpaInfo, new RecordItemIndex(4));
                Validate.AttributeEqual(repo.ComPentairPentairhome.PoolSpaInfo, "AccessibilityLabel", "Pool & Spa", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (PlatformClass='RCTUIImageViewAnimated') on item 'ComPentairPentairhome.RCTUIImageViewAnimated3'.", repo.ComPentairPentairhome.RCTUIImageViewAnimated3Info, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.ComPentairPentairhome.RCTUIImageViewAnimated3Info, "PlatformClass", "RCTUIImageViewAnimated", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(6));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(7));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(8));
            Delay.Duration(5000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
