///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CaptureandValidateSchedulescreen recording.
    /// </summary>
    [TestModule("292565b3-9413-4409-a216-169fe8807b98", ModuleType.Recording, 1)]
    public partial class CaptureandValidateSchedulescreen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static CaptureandValidateSchedulescreen instance = new CaptureandValidateSchedulescreen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CaptureandValidateSchedulescreen()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CaptureandValidateSchedulescreen Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.ScheduleTab' at Center", repo.ComPentairPentairhome.ScheduleTabInfo, new RecordItemIndex(0));
                repo.ComPentairPentairhome.ScheduleTab.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 4s.", new RecordItemIndex(1));
                Delay.Duration(4000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                //Report.Screenshot(ReportLevel.Info, "User", "SetSchedules", repo.ComPentairPentairhome.ScheduleYouHave8DevicesScheduledTh, false, new RecordItemIndex(2));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ScheduleScreenPreviousbtn' at Center", repo.ComPentairPentairhome.ScheduleScreenPreviousbtnInfo, new RecordItemIndex(3));
            repo.ComPentairPentairhome.ScheduleScreenPreviousbtn.Touch();
            Delay.Milliseconds(300);
            
            try {
                //Report.Screenshot(ReportLevel.Info, "User", "SchedulePreviousScreen", repo.ComPentairPentairhome.ScheduleYouHave0DevicesScheduledTh, false, new RecordItemIndex(4));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ScheduleScreenNextScreenbtn' at Center", repo.ComPentairPentairhome.ScheduleScreenNextScreenbtnInfo, new RecordItemIndex(5));
            repo.ComPentairPentairhome.ScheduleScreenNextScreenbtn.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ScheduleScreenNextScreenbtn' at Center", repo.ComPentairPentairhome.ScheduleScreenNextScreenbtnInfo, new RecordItemIndex(6));
            repo.ComPentairPentairhome.ScheduleScreenNextScreenbtn.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(7));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                //Report.Screenshot(ReportLevel.Info, "User", "ScheduleNextScreen", repo.ComPentairPentairhome.ScheduleYouHave28DevicesScheduledT, false, new RecordItemIndex(8));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(9));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(10));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
