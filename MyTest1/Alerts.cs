///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Alerts recording.
    /// </summary>
    [TestModule("39e37cad-6268-4a87-b64a-d065e799eaa2", ModuleType.Recording, 1)]
    public partial class Alerts : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static Alerts instance = new Alerts();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Alerts()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Alerts Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Website", "Opening web site 'http://3.127.177.145:8082/ui/#!/5?socketid=n7ATCugak36uJAblAFh9' with browser 'Chrome' in maximized mode.", new RecordItemIndex(0));
            Host.Current.OpenBrowser("http://3.127.177.145:8082/ui/#!/5?socketid=n7ATCugak36uJAblAFh9", "Chrome", "", false, true, false, false, false, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NodeREDDashboard.Text' at 80;17.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(1));
            repo.NodeREDDashboard.Text.Click("80;17");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{RShiftKey down}{{{RShiftKey up}{RShiftKey down}\"{RShiftKey up}ifs20{RShiftKey down}\"{RShiftKey up}{RShiftKey down}:{RShiftKey up}{RShiftKey down}\"{RShiftKey up}1{RShiftKey down}\"{RShiftKey up}{RShiftKey down}}{RShiftKey up}' with focus on 'NodeREDDashboard.Text'.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(2));
            repo.NodeREDDashboard.Text.PressKeys("{RShiftKey down}{{{RShiftKey up}{RShiftKey down}\"{RShiftKey up}ifs20{RShiftKey down}\"{RShiftKey up}{RShiftKey down}:{RShiftKey up}{RShiftKey down}\"{RShiftKey up}1{RShiftKey down}\"{RShiftKey up}{RShiftKey down}}{RShiftKey up}");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'NodeREDDashboard.Send' at 16;10.", repo.NodeREDDashboard.SendInfo, new RecordItemIndex(3));
                repo.NodeREDDashboard.Send.Click("16;10");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NodeREDDashboard.Send' at 16;10.", repo.NodeREDDashboard.SendInfo, new RecordItemIndex(4));
            repo.NodeREDDashboard.Send.Click("16;10");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Explorer.RanorexStudio2RunningWindows' at 21;21.", repo.Explorer.RanorexStudio2RunningWindowsInfo, new RecordItemIndex(5));
            //repo.Explorer.RanorexStudio2RunningWindows.Click("21;21");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Explorer1.MyTest1RanorexStudio32bitAdmi' at 159;49.", repo.Explorer1.MyTest1RanorexStudio32bitAdmiInfo, new RecordItemIndex(6));
            //repo.Explorer1.MyTest1RanorexStudio32bitAdmi.Click("159;49");
            //Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Your Intelliflo Pump has reported a Priming Failure Alarm') on item 'ComPentairPentairhome.PrimingFailureAlert'.", repo.ComPentairPentairhome.PrimingFailureAlertInfo, new RecordItemIndex(7));
                Validate.AttributeEqual(repo.ComPentairPentairhome.PrimingFailureAlertInfo, "AccessibilityLabel", "Your Intelliflo Pump has reported a Priming Failure Alarm", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.PrimingFailureAlert' at Center", repo.ComPentairPentairhome.PrimingFailureAlertInfo, new RecordItemIndex(8));
            repo.ComPentairPentairhome.PrimingFailureAlert.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='alertImage alertDesc') on item 'ComPentairPentairhome.ValidateDeviceDashboardAlert'.", repo.ComPentairPentairhome.ValidateDeviceDashboardAlertInfo, new RecordItemIndex(9));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ValidateDeviceDashboardAlertInfo, "AccessibilityLabel", "alertImage alertDesc", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='headerContactPro') on item 'ComPentairPentairhome.HeaderContactPro'.", repo.ComPentairPentairhome.HeaderContactProInfo, new RecordItemIndex(10));
                Validate.AttributeEqual(repo.ComPentairPentairhome.HeaderContactProInfo, "AccessibilityLabel", "headerContactPro", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='alertDetected') on item 'ComPentairPentairhome.AlertDetected'.", repo.ComPentairPentairhome.AlertDetectedInfo, new RecordItemIndex(11));
                Validate.AttributeEqual(repo.ComPentairPentairhome.AlertDetectedInfo, "AccessibilityLabel", "alertDetected", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ValidateDeviceDashboardAlert' at Center", repo.ComPentairPentairhome.ValidateDeviceDashboardAlertInfo, new RecordItemIndex(12));
            repo.ComPentairPentairhome.ValidateDeviceDashboardAlert.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Priming Failure') on item 'ComPentairPentairhome.PrimingFailure'.", repo.ComPentairPentairhome.PrimingFailureInfo, new RecordItemIndex(13));
                Validate.AttributeEqual(repo.ComPentairPentairhome.PrimingFailureInfo, "AccessibilityLabel", "Priming Failure", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='The Intelliflo Pump pump has reported a Priming Failure.This could be due to a low water level in the pool, no water in the pump basket, debris stopping flow in the pump basket, a dirty filter, a closed valve or something preventing flow through the system or the pump's inability to prime.') on item 'ComPentairPentairhome.TheIntellifloPumpPumpHasReportedA'.", repo.ComPentairPentairhome.TheIntellifloPumpPumpHasReportedAInfo, new RecordItemIndex(14));
                Validate.AttributeEqual(repo.ComPentairPentairhome.TheIntellifloPumpPumpHasReportedAInfo, "AccessibilityLabel", "The Intelliflo Pump pump has reported a Priming Failure.This could be due to a low water level in the pool, no water in the pump basket, debris stopping flow in the pump basket, a dirty filter, a closed valve or something preventing flow through the system or the pump's inability to prime.", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(15));
            Delay.Duration(3000, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "PrimingFailureDiscription", repo.ComPentairPentairhome.PrimingFailureTheIntellifloPumpPump, false, new RecordItemIndex(16));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.BellIconBtn' at Center", repo.ComPentairPentairhome.BellIconBtnInfo, new RecordItemIndex(17));
            repo.ComPentairPentairhome.BellIconBtn.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(18));
            Delay.Duration(5000, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "AlertDashboardPrimingAlert", repo.ComPentairPentairhome.AddADeviceProblemDetected1AlertYo, false, new RecordItemIndex(19));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.DEVICEALARMMediumYourIntellifloPump' at Center", repo.ComPentairPentairhome.DEVICEALARMMediumYourIntellifloPumpInfo, new RecordItemIndex(20));
                //repo.ComPentairPentairhome.DEVICEALARMMediumYourIntellifloPump.Touch();
                //Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.YourIntellifloPumpHasReportedAPrim1' at Center", repo.ComPentairPentairhome.YourIntellifloPumpHasReportedAPrim1Info, new RecordItemIndex(21));
                repo.ComPentairPentairhome.YourIntellifloPumpHasReportedAPrim1.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(21)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityId='greenDot') on item 'ComPentairPentairhome.GreenDot'.", repo.ComPentairPentairhome.GreenDotInfo, new RecordItemIndex(22));
                Validate.AttributeEqual(repo.ComPentairPentairhome.GreenDotInfo, "AccessibilityId", "greenDot", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(23));
            Delay.Duration(3000, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "NavigationToDeviceDashboardFromAlertScreen", repo.ComPentairPentairhome.IntelliSyncqaalertAlertDetectedAlertTi, false, new RecordItemIndex(24));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(24)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(25));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(26));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NodeREDDashboard.Text' at 77;15.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(27));
            repo.NodeREDDashboard.Text.Click("77;15");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'NodeREDDashboard.Text'.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(28));
            //repo.NodeREDDashboard.Text.PressKeys("");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{RShiftKey down}\"{RShiftKey up}' with focus on 'NodeREDDashboard'.", repo.NodeREDDashboard.SelfInfo, new RecordItemIndex(29));
            //repo.NodeREDDashboard.Self.EnsureVisible();
            //Keyboard.Press("{RShiftKey down}\"{RShiftKey up}");
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence ':\"{RShiftKey up}-85{RShiftKey down}\"{RShiftKey up}{RShiftKey up}' with focus on 'NodeREDDashboard.Text'.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(30));
            //repo.NodeREDDashboard.Text.PressKeys(":\"{RShiftKey up}-85{RShiftKey down}\"{RShiftKey up}{RShiftKey up}");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NodeREDDashboard.Send' at 23;12.", repo.NodeREDDashboard.SendInfo, new RecordItemIndex(31));
            repo.NodeREDDashboard.Send.Click("23;12");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NodeREDDashboard.Text' at 76;12.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(32));
            repo.NodeREDDashboard.Text.Click("76;12");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence ',{RShiftKey down}\"{RShiftKey up}ecs2{RShiftKey down}\"{RShiftKey up}{RShiftKey down}:{RShiftKey up}{RShiftKey down}\"{RShiftKey up}-85{RShiftKey down}\"{RShiftKey up}' with focus on 'NodeREDDashboard.Text'.", repo.NodeREDDashboard.TextInfo, new RecordItemIndex(33));
            repo.NodeREDDashboard.Text.PressKeys(",{RShiftKey down}\"{RShiftKey up}ecs2{RShiftKey down}\"{RShiftKey up}{RShiftKey down}:{RShiftKey up}{RShiftKey down}\"{RShiftKey up}-85{RShiftKey down}\"{RShiftKey up}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NodeREDDashboard.Send' at 23;9.", repo.NodeREDDashboard.SendInfo, new RecordItemIndex(34));
            repo.NodeREDDashboard.Send.Click("23;9");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Weak Wifi connection detected.') on item 'ComPentairPentairhome.validateWeakWifiOnhomeDashboard'.", repo.ComPentairPentairhome.validateWeakWifiOnhomeDashboardInfo, new RecordItemIndex(35));
                Validate.AttributeEqual(repo.ComPentairPentairhome.validateWeakWifiOnhomeDashboardInfo, "AccessibilityLabel", "Weak Wifi connection detected.", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.validateWeakWifiOnhomeDashboard' at Center", repo.ComPentairPentairhome.validateWeakWifiOnhomeDashboardInfo, new RecordItemIndex(36));
            repo.ComPentairPentairhome.validateWeakWifiOnhomeDashboard.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='alertImage alertDesc') on item 'ComPentairPentairhome.ValidateWeakWifiOnDeviceDash'.", repo.ComPentairPentairhome.ValidateWeakWifiOnDeviceDashInfo, new RecordItemIndex(37));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ValidateWeakWifiOnDeviceDashInfo, "AccessibilityLabel", "alertImage alertDesc", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ValidateWeakWifiOnDeviceDash' at Center", repo.ComPentairPentairhome.ValidateWeakWifiOnDeviceDashInfo, new RecordItemIndex(38));
            repo.ComPentairPentairhome.ValidateWeakWifiOnDeviceDash.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(39));
            Delay.Duration(3000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Weak Wi-Fi connection') on item 'ComPentairPentairhome.WeakWiFiConnection'.", repo.ComPentairPentairhome.WeakWiFiConnectionInfo, new RecordItemIndex(40));
                Validate.AttributeEqual(repo.ComPentairPentairhome.WeakWiFiConnectionInfo, "AccessibilityLabel", "Weak Wi-Fi connection", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(40)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Your IntelliSyncqaalert Wifi connection is weak. Consider placing your IntelliSyncqaalert closer to your router or adding a Wifi range extender between your home router and the IntelliSyncqaalert.') on item 'ComPentairPentairhome.ValidateWeakWifiDiscription'.", repo.ComPentairPentairhome.ValidateWeakWifiDiscriptionInfo, new RecordItemIndex(41));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ValidateWeakWifiDiscriptionInfo, "AccessibilityLabel", "Your IntelliSyncqaalert Wifi connection is weak. Consider placing your IntelliSyncqaalert closer to your router or adding a Wifi range extender between your home router and the IntelliSyncqaalert.", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(41)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.BellIconBtn' at Center", repo.ComPentairPentairhome.BellIconBtnInfo, new RecordItemIndex(42));
            repo.ComPentairPentairhome.BellIconBtn.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(43));
            Delay.Duration(3000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Weak Wifi connection detected. Check your system.') on item 'ComPentairPentairhome.WeakWifiConnectionDetectedCheckYou'.", repo.ComPentairPentairhome.WeakWifiConnectionDetectedCheckYouInfo, new RecordItemIndex(44));
                Validate.AttributeEqual(repo.ComPentairPentairhome.WeakWifiConnectionDetectedCheckYouInfo, "AccessibilityLabel", "Weak Wifi connection detected. Check your system.", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(44)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (PlatformClass='RCTUIImageViewAnimated') on item 'ComPentairPentairhome.RCTUIImageViewAnimated2'.", repo.ComPentairPentairhome.RCTUIImageViewAnimated2Info, new RecordItemIndex(45));
                Validate.AttributeEqual(repo.ComPentairPentairhome.RCTUIImageViewAnimated2Info, "PlatformClass", "RCTUIImageViewAnimated", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(45)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Low') on item 'ComPentairPentairhome.ContainerLow1'.", repo.ComPentairPentairhome.ContainerLow1Info, new RecordItemIndex(46));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ContainerLow1Info, "AccessibilityLabel", "Low", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(46)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "ALERTSCREEN", repo.ComPentairPentairhome.AlertsDeleteDEVICEALARMLowWeakWifi, false, new RecordItemIndex(47));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(47)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WeakWifiConnectionDetectedCheckYou' at Center", repo.ComPentairPentairhome.WeakWifiConnectionDetectedCheckYouInfo, new RecordItemIndex(48));
            repo.ComPentairPentairhome.WeakWifiConnectionDetectedCheckYou.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(49));
            Delay.Duration(3000, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "DeviceDashWeakWifiAlert", repo.ComPentairPentairhome.AddADeviceProblemDetected2AlertsW, false, new RecordItemIndex(50));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(50)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(51));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(52));
            Delay.Duration(3000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
