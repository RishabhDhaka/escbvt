///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SubDeviceSettingScreenValidation recording.
    /// </summary>
    [TestModule("e1286091-5f00-445a-b4a8-f01f9ab8d61d", ModuleType.Recording, 1)]
    public partial class SubDeviceSettingScreenValidation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static SubDeviceSettingScreenValidation instance = new SubDeviceSettingScreenValidation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SubDeviceSettingScreenValidation()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SubDeviceSettingScreenValidation Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.IntelliFloVSPump2' at Center", repo.ComPentairPentairhome.IntelliFloVSPump2Info, new RecordItemIndex(0));
            repo.ComPentairPentairhome.IntelliFloVSPump2.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='IntelliFlo VS Pump') on item 'ComPentairPentairhome.HeaderTitle'.", repo.ComPentairPentairhome.HeaderTitleInfo, new RecordItemIndex(1));
                Validate.AttributeEqual(repo.ComPentairPentairhome.HeaderTitleInfo, "AccessibilityLabel", "IntelliFlo VS Pump", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 1') on item 'ComPentairPentairhome.Speed1'.", repo.ComPentairPentairhome.Speed1Info, new RecordItemIndex(2));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed1Info, "AccessibilityLabel", "Speed 1", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 2') on item 'ComPentairPentairhome.Speed2'.", repo.ComPentairPentairhome.Speed2Info, new RecordItemIndex(3));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed2Info, "AccessibilityLabel", "Speed 2", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 3') on item 'ComPentairPentairhome.Speed31'.", repo.ComPentairPentairhome.Speed31Info, new RecordItemIndex(4));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed31Info, "AccessibilityLabel", "Speed 3", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 4') on item 'ComPentairPentairhome.Speed4'.", repo.ComPentairPentairhome.Speed4Info, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed4Info, "AccessibilityLabel", "Speed 4", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Status') on item 'ComPentairPentairhome.Status'.", repo.ComPentairPentairhome.StatusInfo, new RecordItemIndex(6));
                Validate.AttributeEqual(repo.ComPentairPentairhome.StatusInfo, "AccessibilityLabel", "Status", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '250' with swipe duration'500ms' and step count '0' on item 'ComPentairPentairhome.Speed4'.", repo.ComPentairPentairhome.Speed4Info, new RecordItemIndex(7));
            repo.ComPentairPentairhome.Speed4.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
            Delay.Milliseconds(500);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Actual Speed') on item 'ComPentairPentairhome.ActualSpeed'.", repo.ComPentairPentairhome.ActualSpeedInfo, new RecordItemIndex(8));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ActualSpeedInfo, "AccessibilityLabel", "Actual Speed", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Est. Power') on item 'ComPentairPentairhome.EstPower'.", repo.ComPentairPentairhome.EstPowerInfo, new RecordItemIndex(9));
                Validate.AttributeEqual(repo.ComPentairPentairhome.EstPowerInfo, "AccessibilityLabel", "Est. Power", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TemporaryElementId='45674400') on item 'ComPentairPentairhome.RCTView'.", repo.ComPentairPentairhome.RCTViewInfo, new RecordItemIndex(10));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.RCTViewInfo, "TemporaryElementId", "45674400", null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(11));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ESCSetting' at Center", repo.ComPentairPentairhome.ESCSettingInfo, new RecordItemIndex(12));
            repo.ComPentairPentairhome.ESCSetting.Touch();
            Delay.Milliseconds(300);
            
            try {
                //Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.RCTView' at Center", repo.ComPentairPentairhome.RCTViewInfo, new RecordItemIndex(13));
                //repo.ComPentairPentairhome.RCTView.Touch();
                //Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(14));
            Delay.Duration(3000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='IntelliFlo VS Pump') on item 'ComPentairPentairhome.IntelliFloVSPump3'.", repo.ComPentairPentairhome.IntelliFloVSPump3Info, new RecordItemIndex(15));
                Validate.AttributeEqual(repo.ComPentairPentairhome.IntelliFloVSPump3Info, "AccessibilityLabel", "IntelliFlo VS Pump", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (PlatformClass='FFFastImageView') on item 'ComPentairPentairhome.FFFastImageView'.", repo.ComPentairPentairhome.FFFastImageViewInfo, new RecordItemIndex(16));
                Validate.AttributeEqual(repo.ComPentairPentairhome.FFFastImageViewInfo, "PlatformClass", "FFFastImageView", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Product Overview') on item 'ComPentairPentairhome.ProductOverview2'.", repo.ComPentairPentairhome.ProductOverview2Info, new RecordItemIndex(17));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ProductOverview2Info, "AccessibilityLabel", "Product Overview", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Notifications') on item 'ComPentairPentairhome.Notifications1'.", repo.ComPentairPentairhome.Notifications1Info, new RecordItemIndex(18));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Notifications1Info, "AccessibilityLabel", "Notifications", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Product Support') on item 'ComPentairPentairhome.ProductSupport1'.", repo.ComPentairPentairhome.ProductSupport1Info, new RecordItemIndex(19));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ProductSupport1Info, "AccessibilityLabel", "Product Support", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            //Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ProductSupport1' at Center", repo.ComPentairPentairhome.ProductSupport1Info, new RecordItemIndex(20));
            //repo.ComPentairPentairhome.ProductSupport1.Touch();
            //Delay.Milliseconds(300);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(21));
            //Delay.Duration(3000, false);
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText='IntelliFlo Support') on item 'ComPentairPentairhome.IntelliFloSupport'.", repo.ComPentairPentairhome.IntelliFloSupportInfo, new RecordItemIndex(22));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.IntelliFloSupportInfo, "InnerText", "IntelliFlo Support", null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            //Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.RCTUIImageViewAnimated' at Center", repo.ComPentairPentairhome.RCTUIImageViewAnimatedInfo, new RecordItemIndex(23));
            //repo.ComPentairPentairhome.RCTUIImageViewAnimated.Touch();
            //Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Remote Monitoring') on item 'ComPentairPentairhome.RemoteMonitoring1'.", repo.ComPentairPentairhome.RemoteMonitoring1Info, new RecordItemIndex(24));
                Validate.AttributeEqual(repo.ComPentairPentairhome.RemoteMonitoring1Info, "AccessibilityLabel", "Remote Monitoring", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(24)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Contact a Professional') on item 'ComPentairPentairhome.ContactAProfessional3'.", repo.ComPentairPentairhome.ContactAProfessional3Info, new RecordItemIndex(25));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ContactAProfessional3Info, "AccessibilityLabel", "Contact a Professional", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(26));
            Delay.Duration(3000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Up (270°)' starting from 'Center' with distance '250' with swipe duration'500ms' and step count '0' on item 'ComPentairPentairhome.ContactAProfessional3'.", repo.ComPentairPentairhome.ContactAProfessional3Info, new RecordItemIndex(27));
                repo.ComPentairPentairhome.ContactAProfessional3.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(27)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(28));
            Delay.Duration(3000, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "IFSetting", repo.ComPentairPentairhome.IntelliFloVSPumpProductOverviewNoti, false, new RecordItemIndex(29));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(29)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(30));
            Delay.Duration(3000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Down (90°)' starting from 'Center' with distance '250' with swipe duration'800ms' and step count '0' on item 'ComPentairPentairhome.ContactAProfessional1'.", repo.ComPentairPentairhome.ContactAProfessional1Info, new RecordItemIndex(31));
                repo.ComPentairPentairhome.ContactAProfessional1.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Down (90°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "800ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(31)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "IFSetting", repo.ComPentairPentairhome.IntelliFloVSPumpProductOverviewNoti, false, new RecordItemIndex(32));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(32)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 10s.", new RecordItemIndex(33));
                Delay.Duration(10000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(33)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(34));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(35));
            Delay.Duration(3000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
