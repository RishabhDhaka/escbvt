///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddSubDevices recording.
    /// </summary>
    [TestModule("d617222d-efc2-4d32-a671-a7eb140cdda5", ModuleType.Recording, 1)]
    public partial class AddSubDevices : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static AddSubDevices instance = new AddSubDevices();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddSubDevices()
        {
            Pump_List1 = "Hayward Digital Control";
            Pump_List2 = "IntelliFlo VS Pump";
            Pump_list3 = "IntelliFlo VS+SVRS Pump";
            Pump_List4 = "IntelliFlo VSF";
            Pump_list5 = "Hayward Digital Control";
            Pump_list6 = "SuperFlo/Max VS";
            SuperfloSpeedConfig = "Your SuperFlo/Max VS has 3 default speed settings for speeds 1-3. Speeds can only be adjusted on the pump’s interface. To view the speeds and record on the next page, stop the pump, press 1 to view the RPM setting for Speed 1, use the “+” and “–” arrows to adjust. Press Speed 2 and 3 to view and adjust as above.Next set the duration for each speed to zero. Press the stop button to stop the pump. Press the 1 button to scroll through speed 1 settings. Set duration to 0 by using “+” and “-” arrows. Repeat for speeds 1-3.The SuperFlo/Max VS should not be placed in Ext Control Only mode. If the LED is lit next to Ext. Control Only that means it is in Ext. Control Only mode. To turn it off, press the stop button to stop the pump. Press and hold the Stop button for three seconds to toggle the LED to the off mode.For more information refer to SuperFlo/Max VS owner’s manual.";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddSubDevices Instance
        {
            get { return instance; }
        }

#region Variables

        string _Pump_List1;

        /// <summary>
        /// Gets or sets the value of variable Pump_List1.
        /// </summary>
        [TestVariable("675fe6d6-2db0-4cea-a03d-58ece29c159c")]
        public string Pump_List1
        {
            get { return _Pump_List1; }
            set { _Pump_List1 = value; }
        }

        string _Pump_List2;

        /// <summary>
        /// Gets or sets the value of variable Pump_List2.
        /// </summary>
        [TestVariable("da3538b8-0bc3-4263-8bf9-0c99fe09c1ad")]
        public string Pump_List2
        {
            get { return _Pump_List2; }
            set { _Pump_List2 = value; }
        }

        string _Pump_list3;

        /// <summary>
        /// Gets or sets the value of variable Pump_list3.
        /// </summary>
        [TestVariable("b6989bc5-3906-4704-8478-a780321ab928")]
        public string Pump_list3
        {
            get { return _Pump_list3; }
            set { _Pump_list3 = value; }
        }

        string _Pump_List4;

        /// <summary>
        /// Gets or sets the value of variable Pump_List4.
        /// </summary>
        [TestVariable("8d8aad0f-892d-4765-a6f8-fb0e1fd42e34")]
        public string Pump_List4
        {
            get { return _Pump_List4; }
            set { _Pump_List4 = value; }
        }

        string _Pump_list5;

        /// <summary>
        /// Gets or sets the value of variable Pump_list5.
        /// </summary>
        [TestVariable("ea154121-c553-49a7-a019-d7634d3f73ee")]
        public string Pump_list5
        {
            get { return _Pump_list5; }
            set { _Pump_list5 = value; }
        }

        string _Pump_list6;

        /// <summary>
        /// Gets or sets the value of variable Pump_list6.
        /// </summary>
        [TestVariable("11fd6e19-e827-4dde-8783-f891cc07d649")]
        public string Pump_list6
        {
            get { return _Pump_list6; }
            set { _Pump_list6 = value; }
        }

        string _SuperfloSpeedConfig;

        /// <summary>
        /// Gets or sets the value of variable SuperfloSpeedConfig.
        /// </summary>
        [TestVariable("f339972d-3a45-462f-b39b-c2cd479206cb")]
        public string SuperfloSpeedConfig
        {
            get { return _SuperfloSpeedConfig; }
            set { _SuperfloSpeedConfig = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.DeviceImage' at Center", repo.ComPentairPentairhome.DeviceImageInfo, new RecordItemIndex(0));
            repo.ComPentairPentairhome.DeviceImage.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Pump Add'. Associated repository item: 'ComPentairPentairhome.PumpAdd'", repo.ComPentairPentairhome.PumpAddInfo, new RecordItemIndex(1));
                repo.ComPentairPentairhome.PumpAddInfo.WaitForAttributeEqual(5000, "AccessibilityLabel", "Pump Add");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.PumpAdd' at Center", repo.ComPentairPentairhome.PumpAddInfo, new RecordItemIndex(2));
            repo.ComPentairPentairhome.PumpAdd.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Pump_List1) on item 'ComPentairPentairhome.HaywardDigitalControl'.", repo.ComPentairPentairhome.HaywardDigitalControlInfo, new RecordItemIndex(3));
                Validate.AttributeEqual(repo.ComPentairPentairhome.HaywardDigitalControlInfo, "AccessibilityLabel", Pump_List1, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Pump_List2) on item 'ComPentairPentairhome.IntelliFloVSPump1'.", repo.ComPentairPentairhome.IntelliFloVSPump1Info, new RecordItemIndex(4));
                Validate.AttributeEqual(repo.ComPentairPentairhome.IntelliFloVSPump1Info, "AccessibilityLabel", Pump_List2, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Pump_list3) on item 'ComPentairPentairhome.IntelliFloVSPlusSVRSPump'.", repo.ComPentairPentairhome.IntelliFloVSPlusSVRSPumpInfo, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.ComPentairPentairhome.IntelliFloVSPlusSVRSPumpInfo, "AccessibilityLabel", Pump_list3, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Pump_List4) on item 'ComPentairPentairhome.IntelliFloVSF'.", repo.ComPentairPentairhome.IntelliFloVSFInfo, new RecordItemIndex(6));
                Validate.AttributeEqual(repo.ComPentairPentairhome.IntelliFloVSFInfo, "AccessibilityLabel", Pump_List4, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Pump_list5) on item 'ComPentairPentairhome.JandyDigitalControl'.", repo.ComPentairPentairhome.JandyDigitalControlInfo, new RecordItemIndex(7));
                Validate.AttributeEqual(repo.ComPentairPentairhome.JandyDigitalControlInfo, "AccessibilityLabel", Pump_list5, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Pump_list6) on item 'ComPentairPentairhome.SuperFloMaxVS1'.", repo.ComPentairPentairhome.SuperFloMaxVS1Info, new RecordItemIndex(8));
                Validate.AttributeEqual(repo.ComPentairPentairhome.SuperFloMaxVS1Info, "AccessibilityLabel", Pump_list6, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.IntelliFloVSPump1' at Center", repo.ComPentairPentairhome.IntelliFloVSPump1Info, new RecordItemIndex(9));
            repo.ComPentairPentairhome.IntelliFloVSPump1.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(10));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SavePool' at Center", repo.ComPentairPentairhome.SavePoolInfo, new RecordItemIndex(11));
            repo.ComPentairPentairhome.SavePool.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(12));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.PumpAdd' at Center", repo.ComPentairPentairhome.PumpAddInfo, new RecordItemIndex(13));
            repo.ComPentairPentairhome.PumpAdd.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'SuperFlo/Max VS'. Associated repository item: 'ComPentairPentairhome.SuperFloMaxVS1'", repo.ComPentairPentairhome.SuperFloMaxVS1Info, new RecordItemIndex(14));
                repo.ComPentairPentairhome.SuperFloMaxVS1Info.WaitForAttributeEqual(5000, "AccessibilityLabel", "SuperFlo/Max VS");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SuperFloMaxVS1' at Center", repo.ComPentairPentairhome.SuperFloMaxVS1Info, new RecordItemIndex(15));
            repo.ComPentairPentairhome.SuperFloMaxVS1.Touch();
            Delay.Milliseconds(300);
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Record Your Speeds') on item 'ComPentairPentairhome.RecordYourSpeeds'.", repo.ComPentairPentairhome.RecordYourSpeedsInfo, new RecordItemIndex(16));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.RecordYourSpeedsInfo, "AccessibilityLabel", "Record Your Speeds", null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Record Your Speeds') on item 'ComPentairPentairhome.RecordYourSpeeds1'.", repo.ComPentairPentairhome.RecordYourSpeeds1Info, new RecordItemIndex(17));
                Validate.AttributeEqual(repo.ComPentairPentairhome.RecordYourSpeeds1Info, "AccessibilityLabel", "Record Your Speeds", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$SuperfloSpeedConfig) on item 'ComPentairPentairhome.RCTCustomScrollView'.", repo.ComPentairPentairhome.RCTCustomScrollViewInfo, new RecordItemIndex(18));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.RCTCustomScrollViewInfo, "AccessibilityLabel", SuperfloSpeedConfig, null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$SuperfloSpeedConfig) on item 'ComPentairPentairhome.YourSuperFloMaxVSHas3DefaultSpeed2'.", repo.ComPentairPentairhome.YourSuperFloMaxVSHas3DefaultSpeed2Info, new RecordItemIndex(19));
                Validate.AttributeEqual(repo.ComPentairPentairhome.YourSuperFloMaxVSHas3DefaultSpeed2Info, "AccessibilityLabel", SuperfloSpeedConfig, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(20));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.CONTINUE' at Center", repo.ComPentairPentairhome.CONTINUEInfo, new RecordItemIndex(21));
            repo.ComPentairPentairhome.CONTINUE.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Up (270°)' starting from 'Center' with distance '250' with swipe duration'800ms' and step count '0' on item 'ComPentairPentairhome.Speed3'.", repo.ComPentairPentairhome.Speed3Info, new RecordItemIndex(22));
                repo.ComPentairPentairhome.Speed3.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "800ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Save'. Associated repository item: 'ComPentairPentairhome.Save1'", repo.ComPentairPentairhome.Save1Info, new RecordItemIndex(23));
                repo.ComPentairPentairhome.Save1Info.WaitForAttributeEqual(5000, "AccessibilityLabel", "Save");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(23)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Save1' at Center", repo.ComPentairPentairhome.Save1Info, new RecordItemIndex(24));
            repo.ComPentairPentairhome.Save1.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 300ms.", new RecordItemIndex(25));
                Delay.Duration(300, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SavePool' at Center", repo.ComPentairPentairhome.SavePoolInfo, new RecordItemIndex(26));
            repo.ComPentairPentairhome.SavePool.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(27));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(27)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SensorAdd1' at Center", repo.ComPentairPentairhome.SensorAdd1Info, new RecordItemIndex(28));
            repo.ComPentairPentairhome.SensorAdd1.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Air Sensor') on item 'ComPentairPentairhome.AirSensor'.", repo.ComPentairPentairhome.AirSensorInfo, new RecordItemIndex(29));
                Validate.AttributeEqual(repo.ComPentairPentairhome.AirSensorInfo, "AccessibilityLabel", "Air Sensor", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(29)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Water Sensor') on item 'ComPentairPentairhome.WaterSensor2'.", repo.ComPentairPentairhome.WaterSensor2Info, new RecordItemIndex(30));
                Validate.AttributeEqual(repo.ComPentairPentairhome.WaterSensor2Info, "AccessibilityLabel", "Water Sensor", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(30)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WaterSensor2' at Center", repo.ComPentairPentairhome.WaterSensor2Info, new RecordItemIndex(31));
            repo.ComPentairPentairhome.WaterSensor2.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(32));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SensorAdd1' at Center", repo.ComPentairPentairhome.SensorAdd1Info, new RecordItemIndex(33));
            repo.ComPentairPentairhome.SensorAdd1.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AirSensor3' at Center", repo.ComPentairPentairhome.AirSensor3Info, new RecordItemIndex(34));
            repo.ComPentairPentairhome.AirSensor3.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(35));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "AddingDevice", repo.ComPentairPentairhome.IntellisyncModeAutoEquipment12341, false, new RecordItemIndex(36));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(36)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(37));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(38));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(38)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
