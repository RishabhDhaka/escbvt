///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ESC_Dashboard recording.
    /// </summary>
    [TestModule("a246b803-0d85-4f05-93e1-296d729ba610", ModuleType.Recording, 1)]
    public partial class ESC_Dashboard : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static ESC_Dashboard instance = new ESC_Dashboard();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ESC_Dashboard()
        {
            HomeESCStatus = "intellisync AUTO";
            Mode = "Mode Auto";
            DeviceNickname = "intellisync";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ESC_Dashboard Instance
        {
            get { return instance; }
        }

#region Variables

        string _HomeESCStatus;

        /// <summary>
        /// Gets or sets the value of variable HomeESCStatus.
        /// </summary>
        [TestVariable("1ce0b48b-efca-4840-9a7a-5c4f9e924977")]
        public string HomeESCStatus
        {
            get { return _HomeESCStatus; }
            set { _HomeESCStatus = value; }
        }

        string _Mode;

        /// <summary>
        /// Gets or sets the value of variable Mode.
        /// </summary>
        [TestVariable("e2ad23b9-725b-416d-a9b5-9d173645b2f7")]
        public string Mode
        {
            get { return _Mode; }
            set { _Mode = value; }
        }

        string _DeviceNickname;

        /// <summary>
        /// Gets or sets the value of variable DeviceNickname.
        /// </summary>
        [TestVariable("809d6d33-d214-444f-9a75-85067db8cef4")]
        public string DeviceNickname
        {
            get { return _DeviceNickname; }
            set { _DeviceNickname = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$HomeESCStatus) on item 'ComPentairPentairhome.Validate_IntellisyncAUTO'.", repo.ComPentairPentairhome.Validate_IntellisyncAUTOInfo, new RecordItemIndex(0));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Validate_IntellisyncAUTOInfo, "AccessibilityLabel", HomeESCStatus, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(1));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "HomeDashboardUI", repo.ComPentairPentairhome.HomeDashboard, false, new RecordItemIndex(2));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'intellisync AUTO'. Associated repository item: 'ComPentairPentairhome.Validate_IntellisyncAUTO'", repo.ComPentairPentairhome.Validate_IntellisyncAUTOInfo, new RecordItemIndex(3));
                repo.ComPentairPentairhome.Validate_IntellisyncAUTOInfo.WaitForAttributeEqual(5000, "AccessibilityLabel", "intellisync AUTO");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Validate_IntellisyncAUTO' at Center", repo.ComPentairPentairhome.Validate_IntellisyncAUTOInfo, new RecordItemIndex(4));
            repo.ComPentairPentairhome.Validate_IntellisyncAUTO.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Equipment') on item 'ComPentairPentairhome.Equipment'.", repo.ComPentairPentairhome.EquipmentInfo, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.ComPentairPentairhome.EquipmentInfo, "AccessibilityLabel", "Equipment", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$Mode) on item 'ComPentairPentairhome.ValidateESCDashboardModeAuto'.", repo.ComPentairPentairhome.ValidateESCDashboardModeAutoInfo, new RecordItemIndex(6));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ValidateESCDashboardModeAutoInfo, "AccessibilityLabel", Mode, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$DeviceNickname) on item 'ComPentairPentairhome.IntellisyncDashboardStatusAndNicknameValidate'.", repo.ComPentairPentairhome.IntellisyncDashboardStatusAndNicknameValidateInfo, new RecordItemIndex(7));
                Validate.AttributeEqual(repo.ComPentairPentairhome.IntellisyncDashboardStatusAndNicknameValidateInfo, "AccessibilityLabel", DeviceNickname, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(8));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 10s.", new RecordItemIndex(9));
                Delay.Duration(10000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
