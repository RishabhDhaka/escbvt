///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The RequestMonitoring recording.
    /// </summary>
    [TestModule("e7ae29ed-a005-4196-9178-e85fac653bd8", ModuleType.Recording, 1)]
    public partial class RequestMonitoring : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static RequestMonitoring instance = new RequestMonitoring();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public RequestMonitoring()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static RequestMonitoring Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.AccountSettingBtn' at Center", repo.ComPentairPentairhome.AccountSettingBtnInfo, new RecordItemIndex(0));
                repo.ComPentairPentairhome.AccountSettingBtn.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Contact a Professional'. Associated repository item: 'ComPentairPentairhome.ContactAProfessionalonAccountSettingTile'", repo.ComPentairPentairhome.ContactAProfessionalonAccountSettingTileInfo, new RecordItemIndex(1));
                repo.ComPentairPentairhome.ContactAProfessionalonAccountSettingTileInfo.WaitForAttributeEqual(5000, "AccessibilityLabel", "Contact a Professional");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.ContactAProfessionalonAccountSettingTile' at Center", repo.ComPentairPentairhome.ContactAProfessionalonAccountSettingTileInfo, new RecordItemIndex(2));
                repo.ComPentairPentairhome.ContactAProfessionalonAccountSettingTile.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(3));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Contact a Professional about a Device Pool Devices IntelliSyncqaalert  1 2 3 4 5 6 Heater  IntelliFlo VS Pump  Water Sensor  IntelliChlor Salt Chlorinator  SuperFlo/Max VS  Air Sensor  Vertical scroll bar, 1 page Horizontal scroll bar, 1 page Vertical scroll bar, 2 pages Horizontal scroll bar, 1 page') on item 'ComPentairPentairhome.ContactAProfessionalAboutADevicePo'.", repo.ComPentairPentairhome.ContactAProfessionalAboutADevicePoInfo, new RecordItemIndex(4));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.ContactAProfessionalAboutADevicePoInfo, "AccessibilityLabel", "Contact a Professional about a Device Pool Devices IntelliSyncqaalert  1 2 3 4 5 6 Heater  IntelliFlo VS Pump  Water Sensor  IntelliChlor Salt Chlorinator  SuperFlo/Max VS  Air Sensor  Vertical scroll bar, 1 page Horizontal scroll bar, 1 page Vertical scroll bar, 2 pages Horizontal scroll bar, 1 page", null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.ESContheContactAProScreen' at Center", repo.ComPentairPentairhome.ESContheContactAProScreenInfo, new RecordItemIndex(5));
                repo.ComPentairPentairhome.ESContheContactAProScreen.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(6));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Pool Mock3 352 Palmer Road 0.1 miles '. Associated repository item: 'ComPentairPentairhome.PoolMock3352PalmerRoad01Miles'", repo.ComPentairPentairhome.PoolMock3352PalmerRoad01MilesInfo, new RecordItemIndex(7));
                repo.ComPentairPentairhome.PoolMock3352PalmerRoad01MilesInfo.WaitForAttributeEqual(5000, "AccessibilityLabel", "Pool Mock3 352 Palmer Road 0.1 miles ");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.PoolMock3352PalmerRoad01Miles' at Center", repo.ComPentairPentairhome.PoolMock3352PalmerRoad01MilesInfo, new RecordItemIndex(8));
                repo.ComPentairPentairhome.PoolMock3352PalmerRoad01Miles.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 2s.", new RecordItemIndex(9));
                Delay.Duration(2000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "DealerDetails", repo.ComPentairPentairhome.DealerDetailsScreenContainerView, false, new RecordItemIndex(10));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Up (270°)' starting from 'Center' with distance '250' with swipe duration'500ms' and step count '0' on item 'ComPentairPentairhome.SwipeUponDealerDetails'.", repo.ComPentairPentairhome.SwipeUponDealerDetailsInfo, new RecordItemIndex(11));
                repo.ComPentairPentairhome.SwipeUponDealerDetails.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s to exist. Associated repository item: 'ComPentairPentairhome.REQUESTREMOTEMONITORINGBTN'", repo.ComPentairPentairhome.REQUESTREMOTEMONITORINGBTNInfo, new ActionTimeout(5000), new RecordItemIndex(12));
                repo.ComPentairPentairhome.REQUESTREMOTEMONITORINGBTNInfo.WaitForExists(5000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.REQUESTREMOTEMONITORINGBTN' at Center", repo.ComPentairPentairhome.REQUESTREMOTEMONITORINGBTNInfo, new RecordItemIndex(13));
                repo.ComPentairPentairhome.REQUESTREMOTEMONITORINGBTN.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 1s.", new RecordItemIndex(14));
                Delay.Duration(1000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "RequestMonitoringPopUp", repo.ComPentairPentairhome.RemoteMonitoringRemoteMonitoringAllo, false, new RecordItemIndex(15));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.SENDREQUESTBTN' at Center", repo.ComPentairPentairhome.SENDREQUESTBTNInfo, new RecordItemIndex(16));
                repo.ComPentairPentairhome.SENDREQUESTBTN.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(17));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "RequestPending", repo.ComPentairPentairhome.ContainerPoolMock3DealerScreenHeaderC, false, new RecordItemIndex(18));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(19));
                repo.ComPentairPentairhome.HomeIcon.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(20));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
