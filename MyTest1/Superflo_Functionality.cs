///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Superflo_Functionality recording.
    /// </summary>
    [TestModule("ba4e8c9e-364e-4cc5-a6a7-46eefe5e987f", ModuleType.Recording, 1)]
    public partial class Superflo_Functionality : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static Superflo_Functionality instance = new Superflo_Functionality();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Superflo_Functionality()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Superflo_Functionality Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.MyDevicesBtn' at Center", repo.ComPentairPentairhome.MyDevicesBtnInfo, new RecordItemIndex(0));
            repo.ComPentairPentairhome.MyDevicesBtn.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(1));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.ComPentairPentairhome.MyDevicesPoolSpaIntellisync12341, false, new RecordItemIndex(2));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SuperFloMaxVS3' at Center", repo.ComPentairPentairhome.SuperFloMaxVS3Info, new RecordItemIndex(3));
            repo.ComPentairPentairhome.SuperFloMaxVS3.Touch();
            Delay.Milliseconds(300);
            
            try {
                //Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.RCTView2' at Center", repo.ComPentairPentairhome.RCTView2Info, new RecordItemIndex(4));
                //repo.ComPentairPentairhome.RCTView2.Touch();
                //Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='SuperFlo/Max VS') on item 'ComPentairPentairhome.SuperFloMaxVS2'.", repo.ComPentairPentairhome.SuperFloMaxVS2Info, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.ComPentairPentairhome.SuperFloMaxVS2Info, "AccessibilityLabel", "SuperFlo/Max VS", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 1') on item 'ComPentairPentairhome.Speed11'.", repo.ComPentairPentairhome.Speed11Info, new RecordItemIndex(6));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed11Info, "AccessibilityLabel", "Speed 1", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 2') on item 'ComPentairPentairhome.Speed2'.", repo.ComPentairPentairhome.Speed2Info, new RecordItemIndex(7));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed2Info, "AccessibilityLabel", "Speed 2", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Speed 3') on item 'ComPentairPentairhome.Speed3'.", repo.ComPentairPentairhome.Speed3Info, new RecordItemIndex(8));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Speed3Info, "AccessibilityLabel", "Speed 3", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Quick Clean') on item 'ComPentairPentairhome.QuickClean2'.", repo.ComPentairPentairhome.QuickClean2Info, new RecordItemIndex(9));
                Validate.AttributeEqual(repo.ComPentairPentairhome.QuickClean2Info, "AccessibilityLabel", "Quick Clean", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Status') on item 'ComPentairPentairhome.Status1'.", repo.ComPentairPentairhome.Status1Info, new RecordItemIndex(10));
                Validate.AttributeEqual(repo.ComPentairPentairhome.Status1Info, "AccessibilityLabel", "Status", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "SuperfloDashboard", repo.ComPentairPentairhome.SuperFloMaxVSStatusOFFStoppedSpeed, false, new RecordItemIndex(11));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.QuickClean2' at Center", repo.ComPentairPentairhome.QuickClean2Info, new RecordItemIndex(12));
            repo.ComPentairPentairhome.QuickClean2.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "DoubleTap item 'ComPentairPentairhome.RCTView3' at Center", repo.ComPentairPentairhome.RCTView3Info, new RecordItemIndex(13));
            repo.ComPentairPentairhome.RCTView3.DoubleTap();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(14));
            Delay.Duration(10000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Enabled') on item 'ComPentairPentairhome.Enabled'.", repo.ComPentairPentairhome.EnabledInfo, new RecordItemIndex(15));
                Validate.AttributeEqual(repo.ComPentairPentairhome.EnabledInfo, "AccessibilityLabel", "Enabled", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Running') on item 'ComPentairPentairhome.Running'.", repo.ComPentairPentairhome.RunningInfo, new RecordItemIndex(16));
                Validate.AttributeEqual(repo.ComPentairPentairhome.RunningInfo, "AccessibilityLabel", "Running", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            Report.Log(ReportLevel.Info, "Touch", "DoubleTap item 'ComPentairPentairhome.RCTView3' at Center", repo.ComPentairPentairhome.RCTView3Info, new RecordItemIndex(17));
            repo.ComPentairPentairhome.RCTView3.DoubleTap();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(18));
            Delay.Duration(10000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Stopped') on item 'ComPentairPentairhome.Stopped'.", repo.ComPentairPentairhome.StoppedInfo, new RecordItemIndex(19));
                Validate.AttributeEqual(repo.ComPentairPentairhome.StoppedInfo, "AccessibilityLabel", "Stopped", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(20));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(21));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(21)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
