///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The UpdateDeviceNickname recording.
    /// </summary>
    [TestModule("8c279d32-7b03-4082-a4bc-3347d4c99e5d", ModuleType.Recording, 1)]
    public partial class UpdateDeviceNickname : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static UpdateDeviceNickname instance = new UpdateDeviceNickname();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public UpdateDeviceNickname()
        {
            DeviceNickname = "intellisyncs";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static UpdateDeviceNickname Instance
        {
            get { return instance; }
        }

#region Variables

        string _DeviceNickname;

        /// <summary>
        /// Gets or sets the value of variable DeviceNickname.
        /// </summary>
        [TestVariable("851642b5-315c-4f4b-b0b5-0dc20175b399")]
        public string DeviceNickname
        {
            get { return _DeviceNickname; }
            set { _DeviceNickname = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(0));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.DeviceImage' at Center", repo.ComPentairPentairhome.DeviceImageInfo, new RecordItemIndex(1));
            repo.ComPentairPentairhome.DeviceImage.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 300ms.", new RecordItemIndex(2));
                Delay.Duration(300, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ESCsettingGearIcon' at Center", repo.ComPentairPentairhome.ESCsettingGearIconInfo, new RecordItemIndex(3));
            repo.ComPentairPentairhome.ESCsettingGearIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Product Overview'. Associated repository item: 'ComPentairPentairhome.ProductOverview1'", repo.ComPentairPentairhome.ProductOverview1Info, new RecordItemIndex(4));
                repo.ComPentairPentairhome.ProductOverview1Info.WaitForAttributeEqual(5000, "AccessibilityLabel", "Product Overview");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ProductOverview1' at Center", repo.ComPentairPentairhome.ProductOverview1Info, new RecordItemIndex(5));
            repo.ComPentairPentairhome.ProductOverview1.Touch();
            Delay.Milliseconds(300);
            
            try {
                //Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Nickname'. Associated repository item: 'ComPentairPentairhome.Nickname'", repo.ComPentairPentairhome.NicknameInfo, new RecordItemIndex(6));
                //repo.ComPentairPentairhome.NicknameInfo.WaitForAttributeEqual(5000, "AccessibilityLabel", "Nickname");
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Nickname' at Center", repo.ComPentairPentairhome.NicknameInfo, new RecordItemIndex(7));
            repo.ComPentairPentairhome.Nickname.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$DeviceNickname' on item 'ComPentairPentairhome.RCTUITextField'.", repo.ComPentairPentairhome.RCTUITextFieldInfo, new RecordItemIndex(8));
            repo.ComPentairPentairhome.RCTUITextField.Element.SetAttributeValue("Text", DeviceNickname);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.SAVE2' at Center", repo.ComPentairPentairhome.SAVE2Info, new RecordItemIndex(9));
            repo.ComPentairPentairhome.SAVE2.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel='Device Updated') on item 'ComPentairPentairhome.DeviceUpdated'.", repo.ComPentairPentairhome.DeviceUpdatedInfo, new RecordItemIndex(10));
                Validate.AttributeEqual(repo.ComPentairPentairhome.DeviceUpdatedInfo, "AccessibilityLabel", "Device Updated", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ContainerOK' at Center", repo.ComPentairPentairhome.ContainerOKInfo, new RecordItemIndex(11));
            repo.ComPentairPentairhome.ContainerOK.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(12));
            Delay.Duration(4000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(13));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                //Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (AccessibilityLabel=$DeviceNickname) on item 'ComPentairPentairhome.DeviceName'.", repo.ComPentairPentairhome.DeviceNameInfo, new RecordItemIndex(14));
                //Validate.AttributeEqual(repo.ComPentairPentairhome.DeviceNameInfo, "AccessibilityLabel", DeviceNickname, null, false);
                //Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(15));
            Delay.Duration(3000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
