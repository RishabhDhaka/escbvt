///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AirTempgraph recording.
    /// </summary>
    [TestModule("595b8c7c-4d87-496e-8a38-d267a8055ed8", ModuleType.Recording, 1)]
    public partial class AirTempgraph : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest1Repository repository.
        /// </summary>
        public static MyTest1Repository repo = MyTest1Repository.Instance;

        static AirTempgraph instance = new AirTempgraph();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AirTempgraph()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AirTempgraph Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Touch gestures", "(Optional Action)\r\nSwipe gesture with direction 'Up (270°)' starting from 'Center' with distance '250' with swipe duration'500ms' and step count '0' on item 'ComPentairPentairhome.WaterTemp'.", repo.ComPentairPentairhome.WaterTempInfo, new RecordItemIndex(0));
                repo.ComPentairPentairhome.WaterTemp.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
                Delay.Milliseconds(500);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'AccessibilityLabel' to equal the specified value 'Air Temp: '. Associated repository item: 'ComPentairPentairhome.AirTemp'", repo.ComPentairPentairhome.AirTempInfo, new RecordItemIndex(1));
            repo.ComPentairPentairhome.AirTempInfo.WaitForAttributeEqual(5000, "AccessibilityLabel", "Air Temp: ");
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AirTemp' at Center", repo.ComPentairPentairhome.AirTempInfo, new RecordItemIndex(2));
            repo.ComPentairPentairhome.AirTemp.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(3));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "AirSensorDashboard", repo.ComPentairPentairhome.AirSensor, false, new RecordItemIndex(4));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s to not exist. Associated repository item: 'ComPentairPentairhome.AirTempTileOnAirSensorDashboard'", repo.ComPentairPentairhome.AirTempTileOnAirSensorDashboardInfo, new ActionTimeout(5000), new RecordItemIndex(5));
                repo.ComPentairPentairhome.AirTempTileOnAirSensorDashboardInfo.WaitForNotExists(5000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AirTempTileOnAirSensorDashboard' at Center", repo.ComPentairPentairhome.AirTempTileOnAirSensorDashboardInfo, new RecordItemIndex(6));
            repo.ComPentairPentairhome.AirTempTileOnAirSensorDashboard.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(7));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "HourlyAir", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee, false, new RecordItemIndex(8));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s to exist. Associated repository item: 'ComPentairPentairhome.DailyWaterTempGraph'", repo.ComPentairPentairhome.DailyWaterTempGraphInfo, new ActionTimeout(5000), new RecordItemIndex(9));
                repo.ComPentairPentairhome.DailyWaterTempGraphInfo.WaitForExists(5000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.DailyWaterTempGraph' at Center", repo.ComPentairPentairhome.DailyWaterTempGraphInfo, new RecordItemIndex(10));
            repo.ComPentairPentairhome.DailyWaterTempGraph.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(11));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "DailyAirGraph", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee1, false, new RecordItemIndex(12));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 5s to not exist. Associated repository item: 'ComPentairPentairhome.WeeklyWaterTempgraph'", repo.ComPentairPentairhome.WeeklyWaterTempgraphInfo, new ActionTimeout(5000), new RecordItemIndex(13));
                repo.ComPentairPentairhome.WeeklyWaterTempgraphInfo.WaitForNotExists(5000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WeeklyWaterTempgraph' at Center", repo.ComPentairPentairhome.WeeklyWaterTempgraphInfo, new RecordItemIndex(14));
            repo.ComPentairPentairhome.WeeklyWaterTempgraph.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(15));
            Delay.Duration(5000, false);
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "WeeklyAirGraph", repo.ComPentairPentairhome.AirTemperatureHistoryHourlyDailyWee2, false, new RecordItemIndex(16));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.MonthlyWaterTempGraph' at Center", repo.ComPentairPentairhome.MonthlyWaterTempGraphInfo, new RecordItemIndex(17));
            repo.ComPentairPentairhome.MonthlyWaterTempGraph.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(18));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "MonthlyAirGraph", repo.ComPentairPentairhome.HistoryHourlyDailyWeeklyMonthlyVe, false, new RecordItemIndex(19));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(20));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 300ms.", new RecordItemIndex(21));
                Delay.Duration(300, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(21)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
